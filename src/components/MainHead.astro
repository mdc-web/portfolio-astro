---
import '../styles/global.css';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = 'Benoit Modica: Développeur et Consultant IT',
	description = 'Portfolio de Benoit Modica',
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/favicon.png" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>
<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return 'dark'; // Définir le thème sombre par défaut s'il n'y a pas de préférence stockée
	};
	const applyTheme = (theme) => {
		document.documentElement.classList.toggle('theme-dark', theme === 'dark');
	};
	const currentTheme = getThemePreference();
	applyTheme(currentTheme);

	const observer = new MutationObserver(() => {
		const isDark = document.documentElement.classList.contains('theme-dark');
		localStorage.setItem('theme', isDark ? 'dark' : 'light');
	});
	observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
</script>

